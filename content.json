{"pages":[{"title":"关于","date":"2018-02-04T14:03:53.000Z","path":"about/index.html","text":"关于我 姓名： 严顺宽 性别： 男 技能： 熟悉 Java 开发、 Java web开发 现状： 目前是 南京大学软件学院 17级硕士生 联系我如果有志同道合的小伙伴，想交流一下，欢迎联系！ &nbsp;&nbsp;邮箱：shunkuan.ysk@gmail.com &nbsp;&nbsp;企鹅：1195413185 &nbsp;微信：shunkuan-Yan 关于博客博客创建于2018年02月04日，前一段时间突然对VPS很感兴趣，折腾了几个月后终于买下了自己的VPS。最近又开始想自己折腾一个博客来玩玩，顺便记录记录平时的笔记什么的博客采用 Hexo + Git 搭建，使用 Wikitten 主题，托管在 搬瓦工VPS，折腾了近2天完成的博客的雏形 个人博客Hexo搭建 感谢： Hexo 提供博客框架Wikitten 提供博客主题百度统计 提供统计功能Google Analytics 提供 Google 分析Disqus 提供评论服务不蒜子 提供站点计数功能【总访问量，单页面访问量】"},{"title":"Categories","date":"2019-03-17T11:10:39.000Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2019-03-17T11:10:39.000Z","path":"tags/index.html","text":""}],"posts":[{"title":"彻底清除Github上某个文件的历史","date":"2018-04-25T03:00:14.000Z","path":"技术开发/Git/彻底清除Github上某个文件的历史/","text":"这几天看学弟们写的项目，测试的时候为了方便连接数据库就直接把root密码都写进代码文件了，然后Commit再Sync，成功把密码暴露到Github上。 大家肯定不想自己数据库所在服务器的IP和密码暴露，本文提供了三个方法。 把Github上整个项目删了重新创建并上传不含密码的代码，这个对已经维护过很久的项目是致命的，此乃下策； 直接把数据库密码改了，暴露就暴露呗，别人看见了也连不上，此乃中策； 上策也就是我们今天要说的了，Github for Windows/Mac桌面应用以及网页版都没有提供清除某个文件操作记录的功能，就是说即便你删了这个文件重新Push，那么别人依然可以查看你上一个版本。所以我们需要的是把和这个文件有关的所有Commit等记录全部删掉当然也包括文件本身。 首先在Git Bash或者CMD或者PowerShell中cd进入到你的本地项目文件夹，然后依次执行下面6行命令即可：1234567891011git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch FILE_PATH' --prune-empty --tag-name-filter cat -- --allgit push origin master --forcerm -rf .git/refs/original/git reflog expire --expire=now --allgit gc --prune=nowgit gc --aggressive --prune=now 注意上面的FILE_PATH要是路径而不只是文件名字，例如src/main/java/filename.java 亲测有效 Removing sensitive data from a repository","tags":[{"name":"Git","slug":"Git","permalink":"https://wiki.winsky.wang/tags/Git/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"Git","slug":"技术开发/Git","permalink":"https://wiki.winsky.wang/categories/技术开发/Git/"}]},{"title":"修改Github项目的语言分类","date":"2018-02-20T07:26:14.000Z","path":"技术开发/Git/修改Github项目的语言分类/","text":"自己辛辛苦苦写的Java项目，因其中包含了一定了前端代码，在传到Github上被标记成了JavaScript语言，这是一件多么蛋疼的事儿 那如何修改Github项目的语言分类呢？？ 在开始正文之前，请允许我先描述一下遇到这个问题的背景。 早上起来看到论坛上有人说TaoCode快关闭了，打开电脑登录一看还真是 想起来，TaoCode SVN还是上软工2开始接触的第一个版本控制工具。当时，钦哥哥要求将代码部署在SVN上，本来是要自己搭建SVN服务器的，后来我们取巧，发现TaoCode已经帮我们部署好了SVN服务器，于是我们便欢快地注册账号使用起来（注册于2014-09-20） 这一用便是三四年的时间，虽然大四在阿里实习的时候，接触到了另一个版本控制工具Git，便不怎么使用了TaoCode SVN了。但可以说TaoCode陪伴我从一个啥都不会的小白成长为如今的合格 程序猿 研发工程师，此中别有一番感情[捂脸] 在TaoCode上还存在着大大小小近10个项目，如今TaoCode即将停止服务，所以我便想着将自己的代码迁移到Github上来。Github本身提供了从SVN导入仓库的功能，这个使用起来很方便。然鹅，导入的项目被Github自动识别成了JavaScript语言，我可是纯正的Java web项目啊。那要怎么修改Github项目的语言分类呢？？ 注意，前方高能~~~ 下面正式介绍如何修改Github项目的语言分类 在项目目录中创建一个名为.gitattributes的文件，添加以下代码：1*.js linguist-language=Java 然后重新上传到Github上，就可以发现项目的语言变成Java了，其他语言同理 根据我的理解，如果项目中没有.gitattributes的文件来显式指出项目的语言，那么Github会自动根据项目文件出现最多的后缀来判断项目的语言，所以，一个Java web项目很容易就被判定成JavaScript语言 上述的解决办法是通过将.js结尾的文件当成Java文件来统计，类似的还有1234*.html linguist-language=Java*.js linguist-language=Java*.css linguist-language=Java.... 其他可以自由变通","tags":[{"name":"Git","slug":"Git","permalink":"https://wiki.winsky.wang/tags/Git/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"Git","slug":"技术开发/Git","permalink":"https://wiki.winsky.wang/categories/技术开发/Git/"}]},{"title":"MySQL安全与配置","date":"2018-01-18T16:28:21.000Z","path":"数据库/mysql安装与配置/","text":"CentOS 7安装 yum install mariadb-server mariadb 重置mysql密码 mysql -u root //直接回车进入mysql控制台 123mysql &gt; use mysql;mysql &gt; update user set password=password(&apos;123456&apos;) where user=&apos;root&apos;;mysql &gt; exit; 启动mysql service mariadb start 停止mysql service mariadb stop 查看mysql运行状态 service mariadb status 重启mysql service mariadb restart 配置 编辑文件vi /etc/my.cnf 在[mysqld]的项下添加配置内容 配置最大连接数max_connections=1000 配置字符编码character_set_server=utf8 配置不区分大小写lower_case_table_names=1 最大等待时间wait_timeout=31536000 最大释放时间interactive_timeout=3153600012345character_set_server=utf8max_connections=1000lower_case_table_names=1wait_timeout=31536000interactive_timeout=31536000 配置允许远程访问 grant all privileges on *.* to root@&quot;%&quot; identified by &quot;12345a&quot; with grant option; FLUSH PRIVILEGES; 重置密码 先停止数据库服务service mysqld stop 以安全模式启动MySQLmysqld_safe --skip-grant-tables --skip-networking &amp; 注意我们加了--skip-networking，避免远程无密码登录MySQL。 直接root免密登录mysql -uroot 重设密码 use mysql MySQL 5.7.6 以及最新版本：update user set authentication_string=PASSWORD(&#39;12345a&#39;) where User=&#39;root&#39;; MySQL 5.7.5 或更早之前的版本:update user set password=PASSWORD(&#39;12345a&#39;) where User=&#39;root&#39;; 停止安全模式service mysqld stop 正常启动service mysqld start Done~","tags":[{"name":"数据库","slug":"数据库","permalink":"https://wiki.winsky.wang/tags/数据库/"}],"categories":[{"name":"数据库","slug":"数据库","permalink":"https://wiki.winsky.wang/categories/数据库/"}]},{"title":"CSS 属性声明顺序规范","date":"2017-10-24T13:28:59.000Z","path":"程序语言/CSS/CSS 属性声明顺序规范/","text":"CSS 属性声明顺序规范很多 CSS 规范的属性顺序都各不一样，这东西也不像 Vue 组件属性顺序 一样有官方规范，这里记录下我目前认为合适的一种顺序。 属性分类顺序 显示方法 &amp; 布局 定位 盒模型框 外边距 边框 内边距 尺寸 文本样式 字体 文本 文字颜色 背景 轮廓 透明度 &amp; 阴影 动效 过渡 转换变形 动画 其他 伪类 &amp; 伪元素 引用 媒体查询 属性顺序列表 源自 AlloyTeam CSS Code Guide 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177[ [ \"display\", \"visibility\", \"float\", \"clear\", \"overflow\", \"overflow-x\", \"overflow-y\", \"clip\", \"zoom\" ], [ \"table-layout\", \"empty-cells\", \"caption-side\", \"border-spacing\", \"border-collapse\", \"list-style\", \"list-style-position\", \"list-style-type\", \"list-style-image\" ], [ \"position\", \"top\", \"right\", \"bottom\", \"left\", \"z-index\" ], [ \"margin\", \"margin-top\", \"margin-right\", \"margin-bottom\", \"margin-left\", \"box-sizing\", \"border\", \"border-width\", \"border-style\", \"border-color\", \"border-top\", \"border-top-width\", \"border-top-style\", \"border-top-color\", \"border-right\", \"border-right-width\", \"border-right-style\", \"border-right-color\", \"border-bottom\", \"border-bottom-width\", \"border-bottom-style\", \"border-bottom-color\", \"border-left\", \"border-left-width\", \"border-left-style\", \"border-left-color\", \"border-radius\", \"border-top-left-radius\", \"border-top-right-radius\", \"border-bottom-right-radius\", \"border-bottom-left-radius\", \"border-image\", \"border-image-source\", \"border-image-slice\", \"border-image-width\", \"border-image-outset\", \"border-image-repeat\", \"padding\", \"padding-top\", \"padding-right\", \"padding-bottom\", \"padding-left\", \"width\", \"min-width\", \"max-width\", \"height\", \"min-height\", \"max-height\" ], [ \"font\", \"font-family\", \"font-size\", \"font-weight\", \"font-style\", \"font-variant\", \"font-size-adjust\", \"font-stretch\", \"font-effect\", \"font-emphasize\", \"font-emphasize-position\", \"font-emphasize-style\", \"font-smooth\", \"line-height\", \"text-align\", \"text-align-last\", \"vertical-align\", \"white-space\", \"text-decoration\", \"text-emphasis\", \"text-emphasis-color\", \"text-emphasis-style\", \"text-emphasis-position\", \"text-indent\", \"text-justify\", \"letter-spacing\", \"word-spacing\", \"text-outline\", \"text-transform\", \"text-wrap\", \"text-overflow\", \"text-overflow-ellipsis\", \"text-overflow-mode\", \"word-wrap\", \"word-break\" ], [ \"color\", \"background\", \"background-color\", \"background-image\", \"background-repeat\", \"background-attachment\", \"background-position\", \"background-position-x\", \"background-position-y\", \"background-clip\", \"background-origin\", \"background-size\" ], [ \"outline\", \"outline-width\", \"outline-style\", \"outline-color\", \"outline-offset\", \"opacity\", \"box-shadow\", \"text-shadow\" ], [ \"transition\", \"transition-delay\", \"transition-timing-function\", \"transition-duration\", \"transition-property\", \"transform\", \"transform-origin\", \"animation\", \"animation-name\", \"animation-duration\", \"animation-play-state\", \"animation-timing-function\", \"animation-delay\", \"animation-iteration-count\", \"animation-direction\" ], [ \"content\", \"quotes\", \"counter-reset\", \"counter-increment\", \"resize\", \"cursor\", \"user-select\", \"nav-index\", \"nav-up\", \"nav-right\", \"nav-down\", \"nav-left\", \"tab-size\", \"hyphens\", \"pointer-events\" ]] 参考链接 Code Guide by @mdo RECESS | property order Code Guide by @AlloyTeam","tags":[{"name":"CSS","slug":"CSS","permalink":"https://wiki.winsky.wang/tags/CSS/"}],"categories":[{"name":"程序语言","slug":"程序语言","permalink":"https://wiki.winsky.wang/categories/程序语言/"},{"name":"CSS","slug":"程序语言/CSS","permalink":"https://wiki.winsky.wang/categories/程序语言/CSS/"}]},{"title":"Webpack 中 css import 使用 alias 相对路径","date":"2017-09-20T16:11:38.000Z","path":"技术开发/前端/Webpack-中-css-import-使用-alias-相对路径/","text":"起因在用 Webpack 处理打包时，可将某一目录配置一个别名，代码中就能使用与别名的相对路径引用资源。 在 Vue 项目中，我们通常使用 vue-webpack 脚手架生成工程模板，然后配置 @ 为项目根目录下放资源和源码的 /src 目录的别名； 1234567...,resolve: &#123; ..., alias: &#123; '@': resolve('src') &#125;&#125; 这样我们就可以在 js 文件中用形如 import tool from &#39;@/utils/xxx&#39; 的方式引用 /src/utils/xxx.js 文件，并且 Webpack 能正确识别并打包。 但是在 css 文件，如 less, sass, stylus 中，使用 @import &quot;@/style/theme&quot; 的语法引用相对 @ 的目录确会报错，”找不到 ‘@’ 目录”，说明 webpack 没有正确识别资源相对路径。 分析原因是 css 文件会被用 css-loader 处理，这里 css @import 后的字符串会被 css-loader 视为绝对路径解析，因为我们并没有添加 css-loader 的 alias，所以会报找不到 @ 目录。 解决在 Webpack 中 css import 使用 alias 相对路径的解决办法有两种； 一是直接为 css-loader 添加 ailas 的路径，但是在 vue-webpack 给的模板中，单独针对这个插件添加配置就显得麻烦冗余了； 二是在引用路径的字符串最前面添加上 ~ 符号，如 @import &quot;~@/style/theme&quot;；Webpack 会将以 ~ 符号作为前缀的路径视作依赖模块而去解析，这样 @ 的 alias 配置就能生效了。 总结~ 视为模块解析是 webpack 做的事，不是 css-loader 做的事。 各类非 js 直接引用（import require）静态资源，依赖相对路径加载问题，都可以用 ~ 语法完美解决； 例如 css module 中： @import &quot;~@/style/theme&quot; css 属性中： background: url(&quot;~@/assets/xxx.jpg&quot;) html 标签中： &lt;img src=&quot;~@/assets/xxx.jpg&quot; alt=&quot;alias&quot;&gt; 参考资料 vue-webpack 资源路径的处理 Using url(path) with resolve.alias CSS Loader Usage Url","tags":[{"name":"前端","slug":"前端","permalink":"https://wiki.winsky.wang/tags/前端/"},{"name":"webpack","slug":"webpack","permalink":"https://wiki.winsky.wang/tags/webpack/"},{"name":"css-loader","slug":"css-loader","permalink":"https://wiki.winsky.wang/tags/css-loader/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"前端","slug":"技术开发/前端","permalink":"https://wiki.winsky.wang/categories/技术开发/前端/"}]},{"title":"GitHub 团队任务管理流程","date":"2017-09-17T11:41:28.000Z","path":"技术开发/软件工程/GitHub团队任务管理流程/","text":"注：本篇是针对团队的任务管理，非开发规范。 前言GitHub 本身是非常推崇和支持团队合作，也有一些帮助项目管理的插件如 ZenHub，但这里我主要记录使用原生 GitHub 功能的团队任务管理模型构想。 在开始之前，我搜索过大量中文资料，但关于基于 GitHub 的团队管理方面资料很少，尝试英文搜索后，发现我所有的问题都能在官方的 GitHub Help 文档中找到答案； # 再次强调官方文档的重要性 # 所以本篇也不会讲如何操作 GitHub，更不会讲如何使用 Git。 起因实验室内部需要一套规范化的团队管理方案，总体采用用任务驱动制，因此产生了一套 制定任务 –&gt; 安排任务 –&gt; 分配人员 –&gt; 追踪进度 –&gt; 审核成果 –&gt; 解决任务 的管理需求。 细分来说，制定任务包括建立项目，规划项目的几个进行阶段，每个阶段具体有哪些任务，每个任务有哪些要点。 对整个团队来说，有不同方向的人员分组，制定的各项任务应该安排给适合的分组去完成，并且按照拟定的计划，阶段内的任务应该有时限，有明确的截止期限。 在分组内部，再通过分解步骤拟定各项任务和要点，分配给相应的成员。 审核人员根据各项任务完成进度，及时调整，对完成的任务做审核评估，最终标记任务为已解决。 方案GitHub 提供的诸多特性都是应对管理模式的，各项概念中，Issues 提出问题与讨论；Milestone 里程碑，用于将 Issues 划分阶段进行追踪管理；Project 规划和管理项目；Organization 组织，下属成员可分为多个 Team，Team 可多层细分，并有不同的权限；对项目开发来说，能建立 Repositories 放置文件代码，人员相互之间形成 collaborator 合作者；以上这些特性完全能胜任我们需求的管理模式。 对应以上需求，实验室所有人员组成一个 Organization; 按不同研究方向将 Organization 划分为多个 Team，每个 Team 中按照小组关系进一步建立二级、三级 Team。 实验室需要做的项目按照敏捷管理的方式建立 Organization 的 Project，具体划分的不同模块建立多个 Repositories，Organization 的 Project 能跨不同的 Repositories 管理 Issues。 Repositories 没有层级，一个 Repository 能被分配给多个 Team 并赋予不同的权限，但我们可以将一个 Repository 只分配给一个 Team，这样看作是 Team 拥有自己的 Repository。 在 Team 的 Repository 中，通过建立 Milestone 来安排任务目标和截止时间，在 Milestone 中添加 Issues 用作安排具体的任务，Issue 中能建立 Task List，用来表示一个任务的完成步骤和要点；每个 Issue 能指派不同的人员或 Team；Milestone 中会显示所属 Issues 的完成进度，用作任务管理再合适不过了。 Issues 之间能互相提及(关联)这在相互沟通上很有帮助；整个 Issues 面板功能都可以被关闭，但我们更常用的是针对一条 Issue 使用 Locking conversations 功能锁住权限，这样就只有拥有仓库权限的人能在这条 Issue 下评论，通常用于防止 spam，在合作管理中也就防止了不相关的人来捣乱。 一般来说，如果 Team 需要合作完成一项具体的项目，那么可以建一个管理敏捷开发的 Project；如果只是一般的日常任务需求，那么在任务仓库建立几个 Milestone 就够了。两者核心都是 Issues track。 审核任务包括 Code Review 和审核 Issues 完成情况；Code Review 可以在完成一个 Issue 或 完成一项 Milestone 时进行；Issues 进度跟踪需要在日常进行，如果 Issue 是考核任务，那么在超时未 Close 后应认为考核失败。 解决任务的表现形式就是 Close，Close Issues、Close Milestone、Close Project。 总结以上方案就是目前构想的基于 GitHub 的团队任务管理模型，之所以说构想，是因为这套方案未被实施验证，实际进行中肯定会有各种修改和补充的细节。 参考资料 GitHub Help ZenHub | Agile project management within GitHub","tags":[{"name":"Git","slug":"Git","permalink":"https://wiki.winsky.wang/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://wiki.winsky.wang/tags/GitHub/"},{"name":"团队协作","slug":"团队协作","permalink":"https://wiki.winsky.wang/tags/团队协作/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"软件工程","slug":"技术开发/软件工程","permalink":"https://wiki.winsky.wang/categories/技术开发/软件工程/"}]},{"title":"Selenium 中使用 Chrome 路径问题","date":"2017-05-05T16:37:50.000Z","path":"技术开发/前端/Selenium-中使用-Chrome-路径问题/","text":"起因这个问题的起因是折腾了好久，vue2 官方模板 vue init webpack 初始化后，npm install 完，直接 npm run e2e 都报错。。。 123Error retrieving a new session from the selenium serverConnection refused! Is selenium server started? 排查nightwatch.conf.js 中，对服务器和浏览器的地址描述，用的分别是 12server_path: require('selenium-server').path'webdriver.chrome.driver': require('chromedriver').path 在 node 中检查地址没问题，包也没问题。 查找官网资料未果，后在各网友经验中发现两句关键描述： 在 selenium 中使用 chromedriver 驱动，除了需要下载 chromedriver.exe 然后放置在 chrome 浏览器的安装目录之外，还要将 chrome 安装目录添加到环境变量 path 中。 解决 从 node_modules 的 chormedriver 包中复制出 chromedriver.exe 到 Chrome 安装目录下（Google/Chrome/Application/），和 chromed.exe 放在同一目录中。 将 Chrome 安装目录（Google/Chrome/Application/）添加到环境变量 path 下。 把 nightwatch.conf.js 中的 webdriver.chrome.driver 对应的路径手动指定到 Chrome 安装目录下的 chromedriver.exe，Win 下记得字符转义。 此时 npm run e2e 能成功启动 Chrome 并测试。 参考资料 selenium chromedriver配置 使用webdriver打开本地浏览器","tags":[{"name":"前端","slug":"前端","permalink":"https://wiki.winsky.wang/tags/前端/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"前端","slug":"技术开发/前端","permalink":"https://wiki.winsky.wang/categories/技术开发/前端/"}]},{"title":"awk 管道操作小结","date":"2017-04-25T15:04:48.000Z","path":"技术开发/Linux/Shell/awk-管道操作小结/","text":"背景大致是希望使用 awk 读取一个文本文件，通过空行把文本分割成多个文本块，依次把每个文本块输入到一个程序，并把结果依次输出到指定文件。 先看文件结构： 12$ lsplus.sh data.txt 其中， plus.sh 文件内容如下： 12345#!/bin/shIFS=\" \"read a b((c=a+b)) echo $&#123;c&#125; 代码含义是从标准输入读入两个数， a 、b，返回 a+b 的结果。 123$ ./plus.sh2 3 # &lt;-- its my input5 # --&gt; its result data.txt 中的数据如下： 12345670 3030 4040 8080 100 目标是使用 awk 从 data.txt 中读入 4 组数据，分别输入到 plus.sh 中，返回 4 个结果值，并依次输入到 output.txt 中。预期结果 output.txt 如下： 12343070120180 经过一开始，简单的思路是，awk 使用空行分割文本文件，把每组文本块通过管道输入到调用的 plus.sh 中，再把每组的结果通过重定向追加到 output.txt 文件中。 根据思路于是写出如下代码： 1$ awk -v RS=\"\" '&#123;print | \"./plus.sh &gt;&gt; output.txt\"&#125;' data.txt 然而一看结果，只有第一个分段中求出来的值； 12345$ lsplus.sh data.txt output.txt$ cat output.txt30 经过调试和单独输出，发现分段也没问题，单独 print 也是分段的没问题，于是大概猜测问题出在重定向上，除了第一个值以外的其他结果并没有被重定向到文件（此处只是当时猜测，其实不对，请看下文分析）； 通过查阅 「awk 使用管道输出到 shell 中」 的相关资料，找到问题答案： 如果在 awk 程序中打开了管道，必须先关闭该管道才能打开另一个管道。也就是说一次只能打开一个管道。 shell 命令必须被双引号引用起来。 如果打算再次在 awk 程序中使用某个文件或管道进行读写，则可能要先关闭程序，因为其中的管道会保持打开状态直至脚本运行结束。注意，管道一旦被打开，就会保持打开状态直至 awk 退出。 对于 awk output | shell input 来说，shell 接收 awk 的输出，并进行处理。需要注意的是，awk 的 output 是先缓存在 pipe 中，等输出完毕后再调用 shell 命令 处理，shell 命令只处理一次，而且处理的时机是 「awk程序结束时，或者管道关闭时（需要显式的关闭管道）」 对于刚才的问题，简单的解释就是因为管道缓存，print 的所有输出被堆到一起只传了一次给 plus.sh，而且这一次相当于传了整个文件，但 plus.sh 在读了两个数计算完后就退出了，后面的所有数都没用上，由于 plus.sh 只计算了一次，因此结果也只有一个。（并非上面猜测的结果未被重定向） 解决尝试最初的解决尝试是使用 awk 中的 close 命令关闭文件管道，于是写出如下命令： 1$ awk -v RS=\"\" '&#123;print | \"./plus.sh &gt;&gt; output.txt\"; close(\"output.txt\")&#125;' data.txt 结果依然只有一个值。。。 继续查阅资料才知道，close 关闭时需要输入的是管道描述符，而非只是文件名，而管道描述符是包含对管道调用的整个命令在内的 shell 命令字符串，也就是说，应该是 close(&quot;./plus.sh &gt;&gt; output.txt&quot;) 。 再次尝试代码修改如下： 1234567$ awk -v RS=\"\" '&#123;print | \"./plus.sh &gt;&gt; output.txt\"; close(\"./plus.sh &gt;&gt; output.txt\")&#125;' data.txt$ cat output.txt3070120180 OK，解决问题，这句代码就是能用的了。 总结总结下刚刚踩的坑，再做些优化； awk 中先关闭该管道才能打开另一个管道； awk output | shell input 时，awk 输出缓存到管道中，只有 awk 程序结束时，或者管道关闭时，才把缓存中的所有输出交由 shell 处理； 管道描述符是调用管道的整个 shell 命令字符串；（如在 print | &quot;./plus.sh &gt;&gt; output.txt&quot;; 中就是 &quot;./plus.sh &gt;&gt; output.txt&quot;） awk 语句中使用 shell 变量 &quot;&#39;$var&#39;&quot; 的形式 12var=\"test\"awk 'BEGIN&#123;print \"'$var'\"&#125;' 变量中有空格时使用 &quot;&#39;&quot;$var&quot;&#39;&quot; 12var=\"this is a test\" awk 'BEGIN&#123;print \"'\"$var\"'\"&#125;' 变量中有空格，并且变量当作 shell 命令执行时，使用 &quot;\\&quot;&#39;&quot;${var}&quot;&#39;\\&quot;&quot; 形式 12cmd=\"./plus a and b.sh\"awk 'BEGIN&#123;print | \"\\\"'\"$&#123;cmd&#125;\"'\\\"\"&#125;' 再把上面 awk 语句写入到一个脚本中，方便调用： input_test.sh 123456#!/bin/shcmd=\"$&#123;1:-\"./main.sh\"&#125;\"data=\"$&#123;2:-\"test_data.txt\"&#125;\"output=\"$&#123;3:-\"stdout.txt\"&#125;\"awk -v RS=\"\" '&#123;print $n | \"\\\"'\"$&#123;cmd&#125;\"'\\\" &gt;&gt; \\\"'\"$&#123;output&#125;\"'\\\"\";close(\"\\\"'\"$&#123;cmd&#125;\"'\\\" &gt;&gt; \\\"'\"$&#123;output&#125;\"'\\\"\")&#125;' $&#123;data&#125; 然后我们可以调用这个脚本，帮我们分割文本做输入输出。 12345# input_test.sh [command] [data-file] [output-file]$ ./input_test.sh \"./plus.exe\"# 接收三个参数，要测试的命令，数据文件，输出文件，都有默认值# ==&gt; 将自动分割 test_data.txt 中的文本块分别对 plus.exe 做输入，并把结果依次写入 stdout.txt 中 可从这里获取 input_test.sh 源文件。 参考资料 linux之awk用法 | 东方雨中漫步者","tags":[],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"Linux","slug":"技术开发/Linux","permalink":"https://wiki.winsky.wang/categories/技术开发/Linux/"},{"name":"Shell","slug":"技术开发/Linux/Shell","permalink":"https://wiki.winsky.wang/categories/技术开发/Linux/Shell/"}]},{"title":"八大排序算法复杂度","date":"2017-04-20T09:49:14.000Z","path":"技术开发/算法/八大排序算法复杂度/","text":"排序算法时间空间复杂度表 排序方法 平均时间 最坏时间 辅助空间 稳定性 冒泡排序 $O(n^2)$ $O(n^2)$ $O(1)$ 稳定 简单选择排序 $O(n^2)$ $O(n^2)$ $O(1)$ 稳定 直接插入排序 $O(n^2)$ $O(n^2)$ $O(1)$ 稳定 希尔排序 $O(n \\log n)$ $O(n^2)$ $O(1)$ 不稳定 堆排序 $O(n \\log n)$ $O(n \\log n)$ $O(1)$ 不稳定 并归排序 $O(n \\log n)$ $O(n \\log n)$ $O(n)$ 稳定 快速排序 $O(n \\log n)$ $O(n^2)$ $O(n \\log n)$ 不稳定 基数排序 $O(d(n+r))$ $O(d(n+r))$ $O(n)$ 稳定 注：基数排序中，d 为位数，r 为基数，n 为原数组个数。 参考资料 大话数据结构 | 程杰 Sorting Algorithms Animations 冒泡排序 | Wikipedia 选择排序 | Wikipedia 快速排序 | Wikipedia 堆排序| Wikipedia 希尔排序 | Wikipedia 归并排序 | Wikipedia 维基百科上的算法和数据结构链接很强大 | 21aspnet","tags":[{"name":"算法","slug":"算法","permalink":"https://wiki.winsky.wang/tags/算法/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"算法","slug":"技术开发/算法","permalink":"https://wiki.winsky.wang/categories/技术开发/算法/"}]},{"title":"IaaS, PaaS, SaaS 概念","date":"2017-04-18T15:15:15.000Z","path":"技术开发/架构/IaaS-PaaS-SaaS-概念/","text":"云服务通常将其提供的服务自下而上分成三层：基础设施(infrastructure)、平台(platform)和软件(software)。 IaaSInfrastructure-as-a-Service(基础设施即服务) 第一层叫做 IaaS，有时候也叫做 Hardware-as-a-Service，如果你想在办公室或者公司的网站上运行一些应用（比如自己开发好的 APP 或是网络游戏，你需要去买服务器，成本太高了。 但是现在有IaaS，你可以将硬件外包给这些专业的公司，这些公司会提供场外服务器，存储和网络硬件，你花钱租用就行。 这样就节省了维护成本和办公场地，并且你可以在任何时候利用这些硬件来运行其应用。 PaaSPlatform-as-a-Service（平台即服务） 第二层就是 PaaS，某些时候也叫做中间件。PaaS 是面向软件开发者的服务，云计算平台提供硬件，OS， 编程语言，开发库，部署工具， 帮助软件开发者更快的开发软件服务。 云服务商将软件开发的云端开发平台和软件运营的云端运行环境（包括中间件、数据库、we b服务、消息总线等基础通用服务）作为一种服务，提供给最终用户。 换句话说，这些 PaaS 服务商提供的都是基础开发服务平台，主要目的就是让你把精力专注在应用层面的开发上面，而不需要浪费在这些基础重复性的事情上，也不用担心开发完成后部署问题。 SaaSSoftware-as-a-Service（软件即服务） 简单说就是人家把你想要的功能开发好成应用软件，然后直接卖账号给你用，你也不需要担心服务器、带宽、应用开发等问题，直接交钱使用就行。 不再面向开发，而是直接面向企业或普通用户，企业改改 logo，直接给用户使用。 参考资料 IaaS PaaS和SaaS公司的作用 | 盐漂浮草 谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 东坪子的回答 谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 何足道的回答","tags":[{"name":"云服务","slug":"云服务","permalink":"https://wiki.winsky.wang/tags/云服务/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"架构","slug":"技术开发/架构","permalink":"https://wiki.winsky.wang/categories/技术开发/架构/"}]},{"title":"Java 访问控制符","date":"2017-04-17T16:28:59.000Z","path":"程序语言/Java/Java-访问控制符/","text":"访问控制符与访问控制级别Java 提供了 3 个访问控制符：private、protected 和 public，分别代表了 3 个访问控制级别，另外还有一个不加任何访问控制符的默认访问控制级别（friendly，也称 default），也就是共 4 个访问控制级别。 Java的访问控制级别由大到小为： public –&gt; protected –&gt; friendly –&gt; private 访问控制表小结一下其控制可访问作用域 控制级别与作用域 同一类中 同一包中 子类中 外部包任意类 public √ √ √ √ protected √ √ √ friendly √ √ private √","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.winsky.wang/tags/Java/"}],"categories":[{"name":"程序语言","slug":"程序语言","permalink":"https://wiki.winsky.wang/categories/程序语言/"},{"name":"Java","slug":"程序语言/Java","permalink":"https://wiki.winsky.wang/categories/程序语言/Java/"}]},{"title":"Git 清理已追踪或未添加追踪的文件","date":"2017-04-17T14:51:30.000Z","path":"技术开发/Git/Git-清理已追踪或未添加追踪的文件/","text":"git add 将文件及其修改添加到 Git 索引和追踪当中，也就是将文件快照放入暂存区当中，但我们有时候想要丢弃本次修改过并添加到暂存区的内容，或者需要删除未被追踪的文件。 git checkoutgit checkout 是把文件从暂存区中恢复到工作区，也就是说源文件如果被修改，再使用 git add 添加到暂存区了，git checkout 无法把他再恢复到源文件，只能恢复到暂存时的状态。 git resetgit reset 可以用来重置工作区和暂存区还能更改 HEAD 指向，可以达到我们的丢弃本次修改到暂存区的目的。 1234# Usage: git reset [&lt;mode&gt;] [&lt;commit&gt;]# eg: git reset --mixed HEAD$ git reset HEAD$ git checkout . 首先使用 git reset HEAD 把暂存区重置到本次提交，再用 checkout 恢复文件到暂存区的状态，但我们暂存区已经重置了，所以实际 checkout 恢复到的是本次提交时的初始状态了。 git reset 有五种模式，不写明模式参数时，默认为 --mixed，几种模式间主要的差异在于重置的区域不同，这里总结下其异同：（表中不写的位置代表无操作） 重置工作区 重置暂存区 将 HEAD 指向指定 commit –hard √ √ √ –soft √ –mixed √ √ –merge 暂存区有文件则重置失败 √ –keep 暂存区有文件则重置失败 √ 所以刚才上面两行命令， reset 后再 checkou ，可以用 --hard 代替： 1git reset --hard HEAD git clean顺便一提，git reset --hard 是直接重置整个工作区，所以也会把未被添加追踪的新文件也删除了；但 git checkout 是恢复，所以不会影响未添加追踪的新文件。 git clean 就是用来删除未被添加追踪的文件和文件夹的。 1234git clean -n # 将显示哪些未被追踪的文件和文件夹可以清理git clean -d # 清理未被追踪的文件夹git clean -f # 清理未被追踪的文件git clean -df # 清理未被追踪的文件和文件夹 参考资料 git reset简介 Git 工作区、暂存区和版本库 git 删除已经 add 的文件","tags":[{"name":"Git","slug":"Git","permalink":"https://wiki.winsky.wang/tags/Git/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"Git","slug":"技术开发/Git","permalink":"https://wiki.winsky.wang/categories/技术开发/Git/"}]},{"title":"语义化版本号 2.0.0","date":"2017-03-28T09:20:08.000Z","path":"技术开发/软件工程/语义化版本号-2-0-0/","text":"摘要版本格式：主版本号.次版本号.修订号，版本号递增规则如下： 主版本号：当你做了不兼容的 API 修改， 次版本号：当你做了向下兼容的功能性新增， 修订号：当你做了向下兼容的问题修正。 先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。 考虑使用这样的版本号格式：XYZ （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。 我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。 参考资料 Semantic Versioning 2.0.0","tags":[{"name":"版本控制","slug":"版本控制","permalink":"https://wiki.winsky.wang/tags/版本控制/"},{"name":"开发规范","slug":"开发规范","permalink":"https://wiki.winsky.wang/tags/开发规范/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"软件工程","slug":"技术开发/软件工程","permalink":"https://wiki.winsky.wang/categories/技术开发/软件工程/"}]},{"title":"Windows 系统入门操作导图","date":"2017-03-22T12:18:52.000Z","path":"计算机基础知识/Windows系统入门操作导图/","text":"本导图适合刚接触电脑，刚开始使用 Windows 系统，以后可能会经常使用电脑做技术工作，但目前零基础的新手，作为入门引导。 目的为改善现有不良使用习惯，规范一些操作行为，了解一些操作背后的原理，避免安装病毒和流氓软件，简单提高电脑使用效率。 整个导图分为 「1-文件、2-文件系统、3-命令行界面、4-搜索引擎使用、5-软件下载安装、6-常用系统工具」 ，共六个大点，请依次阅读学习；整个主线以第五点 软件下载安装 为中心，将前四点内容依次串联起来，形成结构化知识。 导图类似于大纲框架，每点的分支只具体到内容要点，每个要点需要根据讲解或者查阅详细资料深入其内容。","tags":[],"categories":[{"name":"计算机基础知识","slug":"计算机基础知识","permalink":"https://wiki.winsky.wang/categories/计算机基础知识/"}]},{"title":"字符集与字符编码","date":"2017-03-21T09:10:49.000Z","path":"计算机基础知识/字符集与字符编码/","text":"字符集（Charset） 是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等。 简单的说字符集相当于一种映射关系，一个种类的集合中，把每个字符分配一个唯一的、一一对应的编号。 举个例子比如： 编号 编号表示字符 1 A 2 B 3 C … … 26 Z 27 [ 28 \\ … … 像例子中这样，一组映射想要表示的字符与其编号的集合就叫字符集。 不同的字符集有不同的映射，比如 ASCII 字符集 的映射中， 映射 A-Z 的编号就是 65-90，与上面例子中的编号就不一样，这就是两个不兼容的字符集。 字符编码（Character Encoding）在上面过程中，我们已经给每个字符都分配了一个唯一的编号，但是我们要怎么把打出来的一段文字存到文件中去呢？你可能会觉得的奇怪，这还不简单，计算机是存储的二进制文件，我们把文字中每一个字符编号数字对应的十六进制保存为一个字节，按照字节把文字中的所有字符编号依次写入到文件中不就完了么？ 额，这就会出问题了。上面我们是以 ASCII 字符集来举例的，ASCII 字符集将字母、数字和其它符号编号，并用 8 比特的二进制来表示这个整数；因为每个字符都只有一个字节，所以看起来好像没什么问题；那我们再来考虑下其他的一些字符集。 比如说中文的 GBK 字符集中部分： 编号 编号表示字符 45217 啊 45218 阿 45219 埃 … … 这些编号超过 255 的字符，显然不能用一个字节来表示了，最少也要两个字符。再来按照上面的说法，把它们编号对应的十六进制依次写进文件中，假如这段文本中既有中文又有英文，那么问题来了： 我们在读取文件的时候，读到了 4 个字节，那它究竟是表示两个汉字，还是四个英文字母，还是一个汉字两个字母呢？ 看吧，不加限制的直接保存编号会产生一定的歧义。为了消除这种歧义，方便计算机能够简单的识别和存储字符，我们引入一种 编码规则，比如 所有字符编号对应的十六进制均按两字节存储，不够两字节的编号在前面添加 0x00 来补齐两字节。这样就解决了上面的歧义问题，所有字符都储存为两字节，每次读取两字节来表示一个字符，包括英文也是；这就是一种典型的 双字节定长编码。 嗯，歧义的问题是解决了，但是又有新的问题，上面我们是说至少要两个字节的字符集，要是哪天我们遇到一个要四个字节才能表示字符的字符集，那就得使用 四字节定长编码，这里就存在巨大的浪费。我们这个字符集中前十分之一编号的常用字符时，本来只需要一个字节来表示的字符，现在统统使用四个字节，一篇文章的体积无形中变大了三倍，这就 极大的浪费了存储空间。 于是人们就在想，能不能让原来只需要一个字节表示的字符编号，现在还是用一个字节来储存，原来只需要两个字节表示的字符编号，还是用两个字节来储存，依次类推，都只用其能表示的最小编码长度呢？ 答案是有的，于是有了 变长字符编码。 上面字符集处我们讲到过，每个字符有唯一的，一一对应的编号，在编码后也应如此。这就要求 每个字符有唯一编码，每个码字是唯一可译的。 《信息论》 中指出，只有异前置码是唯一可译码。如果一个码的任何一个码字都不是其他码字的前缀，则称该码为异前置码（前缀码）。异前置码的充要条件是满足克拉夫特不等式（Kraft Inequality），即：$$\\sum_{i=1}^n m{-k_i} \\leq 1,\\text{ ($m$ 为码元数，$k_i$ 指第 $i$ 个码元长度)}$$我们来看一个常见的变长编码（UTF-8）的部分（前三字节）： Byte0 Byte1 Byte2 0xxxxxxx 110xxxxx 10xxxxxx 1110xxxx 10xxxxxx 10xxxxxx 在 ASCII 码的范围，用一个字节表示，超出 ASCII 码的范围就用字节表示，这就形成了我们上面看到的 UTF-8 的表示方法，这様的好处是当 Unicode 文件中只有 ASCII 码时，存储的文件都为一个字节，所以就是普通的 ASCII 文件无异，读取的时候也是如此，所以能与以前的 ASCII 文件兼容。 大于 ASCII 码的，就会由上面的第一字节的前几位表示该 Unicode 字符的长度，比如 110xxxxx 前三位的二进制表示告诉我们这是个 2Bytes 的 Unicode 字符；1110xxxx 是个三位的 Unicode 字符，依此类推；xxx 的位置由字符编码数的二进制表示的位填入。越靠右的x具有越少的特殊意义。只用最短的那个足够表达一个字符编码数的多字节串。注意在多字节串中，第一个字节的开头1的数目就是整个串中字节的数目。 上面提到的 Unicode 就是一种伟大的编码方案标准！Unicode 是计算机科学领域里的一项业界标准，它为让计算机方便的使用统一而兼容的编码表达任意语言的任意字符、用以取代现有的字符编码而设计，也被称为 万国码、统一码。Unicode 标准涵盖的内容很宽，除了视觉上的字形、编码方法、标准的字符编码外，还包含了字符特性，如大小写字母。 我们常说的 Unicode 指的是 Unicode 字符集，是将世界上大部分国家的文字做了整理、编排，不断发展更新的多个文字种类平面的编号集合；Unicode 字符集的编码有多种，其实现方式都称为 Unicode 转换格式 （Unicode Transformation Format，简称为 UTF）。 而 UTF-8 就是只 Unicode 字符集 实现中的一种字符编码方式。 字符集与字符编码的混称总的来说，简单的理解， 字符编码就是字符集这种映射编号具体到计算机处理时，所用编码规则的实现方式。 比如 Unicode 字符集的字符编码方式就有 UTF-8、UTF-16、UTF-32 等。 但是也有很多我们常说的字符编码标准中，即包含了字符集也包含了字符编码，比如 ASCII 字符集 和 ASCII 字符编码，GB2312 字符集 和 GB2312 字符编码，GBK 字符集 和 GBK 字符编码 等； 于是人们也常把它们混称，将字符集和字符编码都用标准方案的名称来统称，比如 ASCII 编码、 GBK 编码、GB2312 编码。但是我们在谈论的时候，应该自己根据话语环境分辨其具体指代意思而不至出现歧义。 现代编码模型在 Unicode 技术报告 Unicode Technical Report (UTR) 中，将现代编码模型分为五个层次： 抽象字符表（Abstract character repertoire）是一个系统支持的所有抽象字符的集合。字符表反映了如何将书写系统分解成线性信息单元。例如拉丁、希腊字母表分为字母、数字、标点这样的一些字符，它们都能按照一种简单的线性序列排列，字符表包括预先编号的字母和符号的组合。 编码字符集（CCS: Coded Character Set）是将字符集 $\\displaystyle C$ 中每个字符映射到一个坐标（整数值对：x, y）或者表示为一个非负整数 $\\displaystyle N$ 。字符集及码位的映射称为编码字符集。多个编码字符集可以表示同样的字符表，由此产生了编码空间（encoding space）的概念：简单说就是包含所有字符的表的维度。编码空间还可以用其子集来表述，如行、列、面（plane）等。编码空间中的一个位置（position）称为 码位（code point）。一个字符所占用的码位称为 码位值（code point value）。编码字符集就是把抽象字符映射为码位值。 字符编码表（CEF: Character Encoding Form），也称为 storage format，是将编码字符集的非负整数值（即抽象的码位）转换成有限比特长度的整型值（称为 码元 code units）的序列。对于定长编码来说是个到自身的映射（mapping），但对于变长编码来说，该映射比较复杂，即把一些码位映射到一个码元，把另外一些码位映射到由多个码元组成的序列。 字符编码方案（CES: Character Encoding Scheme），也称作 serialization format。将定长的整型值（即码元）映射到 8 位字节序列，以便编码后的数据的文件存储或网络传输。例如在使用Unicode的场合，使用一个简单的字符来指定字节顺序是大端序或者小端序（UTF-16BE, UTF-16LE）。 传输编码语法（transfer encoding syntax），用于处理上一层次的字符编码方案提供的字节序列。一般其功能包括两种：一是把字节序列的值映射到一套更受限制的值域内，以满足传输环境的限制，例如 Base64；另一是压缩字节序列的值，如 LZW 或者进程长度编码等无损压缩技术。 参考资料 Character encoding | Wikipedia Unicode | Wikipedia 字符集和字符编码 | 吴秦 计算机系统是如何显示一个字符的？ - 知乎 Windows 记事本的 ANSI、Unicode、UTF-8 这三种编码模式有什么区别？ - 知乎 | 梁海的回答","tags":[],"categories":[{"name":"计算机基础知识","slug":"计算机基础知识","permalink":"https://wiki.winsky.wang/categories/计算机基础知识/"}]},{"title":"曲线调整工具与直方图","date":"2017-03-21T07:05:28.000Z","path":"计算机基础知识/图形图像/曲线调整工具/","text":"引入「曲线工具」这个东西，经常修图或做视频的人一定不陌生，它在很多图像视频工具中都有出现，比如 AE、PR、PS、LR 等中；其强大之处自不用我多说，这里主要针对还未入门的 零基础 的朋友作一个基本的介绍和认识。 在谈到「曲线工具」之前，不得不先谈到图像「直方图」这个东西； 「直方图」简单的来说，直方图是统计图片中按照不同的明暗级别从黑到白（从暗到明），统计在某个亮度的像素数量有多少。（以下谈到直方图，若无特指，那均指 RGB 全通道亮度直方图，不谈论色相） 我们先看看 PS 中的直方图是什么样的； 四个框中，最上面就是全通道的直方图，下面三个依次是 RGB 三个通道的直方图；直方图的横轴表示亮度级别，左边表示最暗，向右依次变亮，最右边表示最亮最白；纵轴表示像素数量。 我们再来看一个简化版的示意图； 举个例子，假设上面这张简化的直方图是统计一张 只有 22 个像素的图片，那么可以从直方图中看到 统计结果： 纯黑的像素有 3 个、灰度一级的像素有 2 个、中度灰色的有 5 个、 …… 、纯白的有 2 个。 嗯，上面这个图结合例子很好理解吧，那让我们把它扩展一下，道理还是不变，只是把分级加精细一点，像素加多一点，导出一张真实一点的我们实际中常见样子的直方图； 直观看出，这张直方图所代表的原始图片中，中等偏亮的像素点在整个图片中占主体；也就是图片整体颜色是偏亮系的，看起来不是暗色调的。 类似的，假设图片直方图中只形成了一个山峰，如果山峰位置偏右边，就表示图片整体是暗色调的；如果山峰位置偏左，就表示图片整体看起来是亮色系的，整体色调是明亮的。 【这里注意，摄影和修图的重点都是自己到底想表达什么，不要过度纠结于传统观念，就认为山峰靠右就一定是曝光失误造成欠曝一定要调整曝光等等；主要是看自己的想法，有些场景可能就需要这样，不是失误欠曝，比如表现夜空中的明月或星空。】 说完直方图，我们就可以回过来看「曲线工具」了。 「曲线工具」 再看到曲线工具，就要注意调整框内，背景中的 阴影山峰 了，这就是刚刚讲的 直方图。 「曲线工具」 其实是 曲线调整 + 直方图，两者 横坐标共用，含义都一样，指 亮度分级； 但纵坐标含义就不一样了。 曲线工具的纵坐标也是指亮度分级，没错，纵坐标和横坐标的含义与数值分布完全一样！ 再看上面这条线，虽然名字叫「曲线工具」，但是打开工具初始状态下这根线就是直线，只不过可以添加关键点来把直线拖成曲线。 初始状态下的直线，是从左下连到右上的，相当于是从横纵轴都最暗的地方，连到横纵轴都最亮的地方； 也就是： $$y = f(x) = x , (0 \\leq x \\leq 255)$$ 现在我们再说一下纵坐标 y 和横坐标 x 的一点区别；这条线上一个点的横坐标值，表示图片上的某个原始亮度值，纵坐标表示这个原始亮度经过调整后的亮度变成了多少。 合起来的意思就是，这条曲线（或直线）表示对原图色彩的一种映射，把原图的每个色彩亮度，映射到现在的每个对应的色彩亮度，即： $$y = f(x) , (0 \\leq x \\leq 255 , x = 原始亮度 , y = 调整后亮度)$$ 比如说常见的 S 型曲线可以加深对比度，其实就是把原本暗的变得更暗，把原本亮的变得更亮，所以对比度就变高了。 基于这个道理，接下来解释几种基本曲线的调整方式； 初始直线 初始直线相当于原本什么亮度现在还是什么亮度，什么都没变，就是画面原本的样子。 上凸曲线 对比原始图片，现在用的上凸曲线除了端点的每个点都在 $y = x$ 直线上方，也就是不管是暗的还是亮的每个点都不同程度的加亮了一些，所以整个画面看起来都亮了。 下凸曲线 与上凸曲线刚好相反，下凸曲线都在 $y = x$ 直线之下，每个点都不同程度的调暗了一点，所以整体画面变暗。 S 型曲线 S 型曲线最常见，通常修图都会先拉起对比度，也就是调了个 S 型曲线；刚刚也说过，S 型曲线左边暗部在 $y = x$ 之下，右边亮部在 $y = x$ 之上，相当于把暗的点调的更暗，把亮的点调得更亮，于是明暗差异变大，对比度也就提高了。 反 S 型曲线 反 S 型曲线与 S 型曲线方向看起来相反，作用也刚好相反，它是把暗部调亮，亮部调暗，明暗差异变小，用来降低对比度的。 反对角线 对比初始直线，这里反对角线其实就是 $y = -x$ 直线，相当于把所有明暗亮度对称颠倒过来，这里的亮度也包括相位，于是所有颜色反相了，看起来就是将图片反色处理了。 参考资料 如何读懂直方图 如何看懂照片的直方图？ 『摄影入门』怎样知道照片曝光是否合适？直方图！ 教你轻松掌握PS曲线工具 ps曲线工具的详细使用方法介绍","tags":[{"name":"图像格式","slug":"图像格式","permalink":"https://wiki.winsky.wang/tags/图像格式/"}],"categories":[{"name":"计算机基础知识","slug":"计算机基础知识","permalink":"https://wiki.winsky.wang/categories/计算机基础知识/"},{"name":"图形图像","slug":"计算机基础知识/图形图像","permalink":"https://wiki.winsky.wang/categories/计算机基础知识/图形图像/"}]},{"title":"gulp-imagemin 使用与参数设置","date":"2017-02-03T05:50:52.000Z","path":"技术开发/前端/gulp-imagemin-使用与参数设置/","text":"使用版本 gulp : v3.9.1 gulp-imagemin : v3.1.1 简介gulp-imagemin 是配合 gulp 用作压缩图片文件的工具（包括PNG、JPEG、GIF和SVG图片）。 gulp-imagemin 更新 v3.0.0 版本后，用法与之前版本有所区别。 最近我一开始使用的时候就在网上搜索，看到很多博客都讲得一样，于是随便复制了一段代码拿来用。但是实际测试发现，这段代码里设置的参数并没有起作用，比如不管怎样设置压缩质量，出来的结果都一样。于是开始调试，通过阅读源码和官方文档后，我发现目前国内网上关于 gulp-imagemin 的代码大部分都是错的，并且明显看得出是相互抄袭复制的。或者也不能说是错了——没有注明版本，原来的代码用在目前的版本（v3.1.1）上就是错的。 我摘抄了一则 gulp-imagemin 网上常见的错误代码 如下：（注意是对 v3.0.0 及以上版本的错误代码，对 v2.4.0 版本可能正确。） 1234567891011121314// 只适用于gulp-imagemin 2.4.0 或以下版本var gulp = require('gulp'), imagemin = require('gulp-imagemin'); gulp.task('testImagemin', function () &#123; gulp.src('src/img/*.&#123;png,jpg,gif,ico&#125;') .pipe(imagemin(&#123; optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: true, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: true //类型：Boolean 默认：false 多次优化svg直到完全优化 &#125;)) .pipe(gulp.dest('dist/img'));&#125;); 上段代码出处：gulp教程之gulp-imagemin | 一点 且不说 progressive: true 的意思应该是“转为渐进式图片”，这段代码在 gulp-imagemin v3.0.0 之后就不正确了，主要体现在 imagemin(option) 的参数设置。 目前网上没有找到几个 3.0.0 之后版本的示例代码，于是我自己去查看官方 API 说明，这里摘抄一段如下： sindresorhus committed on 12 Aug 2016 APIComes bundled with the following lossless optimizers: gifsicle — Compress GIF images jpegtran — Compress JPEG images optipng — Compress PNG images svgo — Compress SVG images These are bundled for convenience and most will not need anything else. imagemin([plugins], [options])Unsupported files are ignored. pluginsType: ArrayDefault: [imagemin.gifsicle(), imagemin.jpegtran(), imagemin.optipng(), imagemin.svgo()] Plugins to use. This will overwrite the default plugins. Note that the default plugins comes with good defaults and should be sufficient in most cases. See the individual plugins for supported options. optionsType: Object verboseType: booleanDefault: false Output more detailed information. 可以看到 options 项只有一个项 verbose，用于输出详细信息，而不是像上面那段代码的 optimizationLevel interlaced 等项。 在四个默认插件的 API 文档中又能进一步找到参数说明。 根据官方 API 文档，我这里给出我的示例代码如下： 1234567891011121314// gulp-imagemin v3.0.0 及以上版本const gulp = require('gulp');const imagemin = require('gulp-imagemin');gulp.task('minify-imgs', function () &#123; return gulp.src('./public/images/**/*.&#123;png,jpg,gif,svg&#125;') .pipe(imagemin([ imagemin.gifsicle(&#123;interlaced: true&#125;), imagemin.jpegtran(&#123;progressive: true&#125;), imagemin.optipng(), imagemin.svgo() ], &#123;verbose: false&#125; )) .pipe(gulp.dest('./public/images'))&#125;); 以上代码仍使用四个默认 imagemin 插件，设置将 gif 转为交错式，将 jpeg 转为渐进式，png 与 svg 使用默认设置，不输出详细信息。 所以用某一个工具或者模块之前，应该先自己阅读一遍官方文档。 我所了解的现在人们一般学习过程是，先看博客里的入门教程，然后直接写代码，学过了入门级往深一点走，才知道遇到问题会去查官方文档。我想说，官方文档有时候确实难啃，但是如果一开始我们就看了官方文档，后面会不会少走点弯路呢？ 参考资料 gulp教程之gulp-imagemin gulp-imagemin图片压缩—-gulp系列 gulp-imagemin | npmjs sindresorhus/gulp-imagemin | GitHub imagemin/imagemin-jpegtran | GitHub","tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://wiki.winsky.wang/tags/Nodejs/"},{"name":"gulp","slug":"gulp","permalink":"https://wiki.winsky.wang/tags/gulp/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"前端","slug":"技术开发/前端","permalink":"https://wiki.winsky.wang/categories/技术开发/前端/"}]},{"title":"渐进式 JPEG 格式","date":"2017-02-01T15:02:02.000Z","path":"计算机基础知识/图形图像/渐进式-JPEG-格式/","text":"JPEG 图像文件有两种保存方式，分别是 Baseline JPEG（基本式）和Progressive JPEG（渐进式），两种方式保存时有相同的尺寸、后缀名和图像数据，区别是两种格式文件在加载时的显示方式不同。 Baseline JPEGBaseline（基本式）格式保存的 JPEG 文件是通过一次按从上到下的扫描，顺序式编码（Sequential Encoding）保存数据的，加载这个文件时，数据将按照存储的顺序从上一行一行往下显示出来，正如其名字一样，是线性加载显示，直到加载完所有数据。 Progressive JPEGProgressive （渐进式）格式保存的 JPEG 文件包含多次扫描，采用递增式编码（Progressive Encoding）来存储数据，每次扫描整个图片并在上次基础上产生一次图像数据。图片在加载时，依次读取数据，先模糊的显示整个图片，随着读到的扫描次数增加，图片不断变得清晰，直到完显示所有数据。 对比上面张效果图都是在网速慢时浏览器上常出现的明显情况，一般来说网站上应该使用 渐进式 JPEG， 因为通常我们认为渐进式比起基本式来说，可以让用户在刚开始下载图片时就看到整个图片的大致轮廓和内容，而不必一直干等着加载，并且比起基本型未加载完时的空白，渐进式在未加载完时，依旧有草图的显示，在心理上会直观的感觉这个网站加载更快一点。 两个格式对于同一个图像来说，没有明显的大小和性能差异，图片质量也是一模一样，只是通常来说，同一个图像 渐进式保存比基本式保存的文件大小更小一点，在保存和显示时，渐进式消耗的 CPU 资源更多一点。 在 Photoshop 中，“文件”菜单下可选择“Save for Web”（汉化版为：存储为 Web 格式），JPEG 格式下可勾选“Progressive”（汉化版为：连续），然后保存就是渐进式的 JPEG。（顺便一提，PNG 格式下汉化叫“交错”） 参考资料 使用渐进式JPEG来提升用户体验 渐进式jpeg(progressive jpeg)图片及其相关 Progressive jpegs: a new best practice","tags":[{"name":"图像格式","slug":"图像格式","permalink":"https://wiki.winsky.wang/tags/图像格式/"}],"categories":[{"name":"计算机基础知识","slug":"计算机基础知识","permalink":"https://wiki.winsky.wang/categories/计算机基础知识/"},{"name":"图形图像","slug":"计算机基础知识/图形图像","permalink":"https://wiki.winsky.wang/categories/计算机基础知识/图形图像/"}]},{"title":"Vim 粘贴模式","date":"2017-01-26T16:54:39.000Z","path":"技术开发/Linux/Vim/Vim-粘贴模式/","text":"在开启自动缩进的 Vim 中使用 Shift + Insert 键粘贴带有缩进的代码时，Vim 会把粘贴的内容当作键盘输入来处理，使得每遇到一个换行符就会添加一次自动缩进，导致原本的代码每行被依次连续往后缩，导致代码变乱。 既然是缩进问题，首先尝试的是取消自动缩进功能： 12345\" 关闭自动缩进和智能缩进\" set noai\" set nosi:set nosmartindent :set noautoindent 关闭自动缩进后，有时能解决错行了，有时还是不行。 更推荐的做法是使用 Vim 的 Paste 模式，这个是 Vim 自带的，为了避免粘贴时出现一些格式错误而使用的。 1234\" 开启粘贴模式:set paste\" 取消粘贴模式:set nopaste 在粘贴模式下（Paste Mode），粘贴内容不会出现代码变形，通过部分了解，发现粘贴模式修改了好几项设置： textwidth 设置为 0 wrapmargin 设置为 0 softtabstop 设置为 0 关闭自动缩进（noautoindent nosmartindent） 重置 revins 重置 ruler 重置 showmatch 清空 formatoptions 禁用 lisp 禁用 indentexpr 禁用 cindent 所以之前说的关闭自动缩进只是 Paste 模式下的一项，考虑不够全面，所以有时还是会格式错位。 并且 Paste 模式本身有一个切换选项 pastetoggle 可以直接绑定快捷键来方便切换开启和取消粘贴模式。 1:set pastetoggle=&lt;F11&gt; 这样只需要按 F11 就能开启和取消粘贴模式了。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://wiki.winsky.wang/tags/Linux/"},{"name":"Vim","slug":"Vim","permalink":"https://wiki.winsky.wang/tags/Vim/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"Linux","slug":"技术开发/Linux","permalink":"https://wiki.winsky.wang/categories/技术开发/Linux/"},{"name":"Vim","slug":"技术开发/Linux/Vim","permalink":"https://wiki.winsky.wang/categories/技术开发/Linux/Vim/"}]},{"title":"Git commit message 基本规范","date":"2017-01-22T20:14:54.000Z","path":"技术开发/Git/Git-commit-message-基本规范/","text":"使用 git 提交版本时，commit message 很重要，在回顾 commit log 时需要清晰的知道每次改动是什么。 在我们写这个提交信息（commit message）时，应该遵守一定书写结构，帮助我们统一规范和理清思路。 一般遵守 thoughtbot 规范，这里有他们的详细说明 5 Useful Tips For A Better Commit Message。 12345678950-character subject line72-character wrapped longer description. This should answer:* Why was this change necessary?* How does it address the problem?* Are there any side effects?Include a link to the ticket, if any. 简单的说就是： 第一行不超过 50 个字符 第二行空一行 第三行开始是描述信息，每行长度不超过 72 个字符，有序号，结尾无句号 第三行开始的描述信息主要说明： 这个提交有什么改动？ 如何解决的问题？ 会对哪方面产生影响吗？ 描述信息完后空一行，close issue 或者给个相应 ticket 的链接 Example: 12345678fix($compile): couple of unit tests for IE9 1. Older IEs serialize html uppercased, but IE9 does not...2. Would be better to expect case insensitive, unfortunately jasmine does3. not allow to user regexps for throw expectations Closes #392Breaks foo.bar api, foo.baz should be used instead","tags":[{"name":"Git","slug":"Git","permalink":"https://wiki.winsky.wang/tags/Git/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"Git","slug":"技术开发/Git","permalink":"https://wiki.winsky.wang/categories/技术开发/Git/"}]},{"title":"Ubuntu 16.04 开机默认命令行界面","date":"2017-01-22T19:43:10.000Z","path":"技术开发/Linux/Ubuntu/Ubuntu-16-开机默认命令行界面/","text":"关闭图形界面，默认命令行 不推介，不可恢复 1sudo systemctl disable lightdm.service 将会直接卸载删除 lightdm，目前没找到直接恢复办法。 推介，安全，可恢复 1sudo systemctl set-default multi-user.target 只是修改默认交互目标，开机不会后台启动桌面。 开启图形界面，默认图新界面 针对上述第一条，只能重装 lightdm 1sudo apt-get install --reinstall lightdm 对应上述第二条，再切换回默认图形交互 1sudo systemctl set-default graphical.target 临时开启 刚刚两条都是需要要配置后重启的，不过就算不切换默认，或者在重启之前，任何时候都可以临时开启图形界面： 1sudo systemctl start lightdm 只限当次开机中，如果没有切换默认图形界面，下次开机任然会是命令行界面。","tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://wiki.winsky.wang/tags/Ubuntu/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"Linux","slug":"技术开发/Linux","permalink":"https://wiki.winsky.wang/categories/技术开发/Linux/"},{"name":"Ubuntu","slug":"技术开发/Linux/Ubuntu","permalink":"https://wiki.winsky.wang/categories/技术开发/Linux/Ubuntu/"}]},{"title":"Linux 命令控制屏幕","date":"2017-01-21T19:13:34.000Z","path":"技术开发/Linux/Linux-命令控制屏幕/","text":"关闭屏幕适合没有关闭屏幕快捷键的笔记本等设备。 /sys 文件方式： 1sudo tee /sys/class/backlight/intel_backlight/brightness &lt;&lt;&lt; 0 亮度值根据情况选择，一般 0 即为关闭。 xset 命令方式： 1xset dpms force off 实际使用时可写成脚本，然后设置自定义快捷键来运行。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://wiki.winsky.wang/tags/Linux/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"https://wiki.winsky.wang/categories/技术开发/"},{"name":"Linux","slug":"技术开发/Linux","permalink":"https://wiki.winsky.wang/categories/技术开发/Linux/"}]},{"title":"Welcome winsky's Wiki Site","date":"2017-01-21T17:55:57.000Z","path":"index/","text":"这是 winsky 的个人 Wiki 站点，主要记录一些自己总结的操作型知识点。 系统的搭建是参考的大佬的主题hexo-theme-Wikitten，以下也是摘自大佬的原话。 我一直觉得 知识不能碎片化，要结构化，于是希望寻找一种优雅的方式来管理我的知识。 先后了解或尝试过 OneNote、Evernote、Blog、Wiki 等方式，总结了一套觉得比较合理的知识获取吸收管理流程： 通过网页、RSS、微信等网络渠道作为知识获取来源。 通过笔记系统（手写笔记、OneNote、Evernote）初步筛选有价值有针对性的信息，收藏信息，分类整理，做读后要点笔记记录。 自己平时突然想到或总结的一两句话，或很零碎的点子、灵感，初步消化的内容，则用 Wiki 记录。 最后当 Wiki 在某版块有一定量后，将这方面笔记和 Wiki 中的内容重读，整理和提炼，二次消化精炼再加上自己的感悟和理解，写成文章发表在 博客 上。 在使用中，笔记系统 主大块信息的分类和整理，Wiki 主零碎知识的积累，而 博客 只在于 精。 Wiki 中某一版块刚建时，可能只有很少内容或者就一句话，但是通过这种使用流程，日积月累，这方面的事物接触得多了，零散的知识也就多了，那么 Wiki 中这个版块记录的内容也就会变多了，也就是通过积累，把原本大量碎片化的知识结构化整理起来了。 博客的目的是 分享和展示，分享自己的知识，展示自己的水平，需要放拿得出手的东西，因此不适合放碎片化的只言片语，更适合放 一个系列 的总结或者教程等，是一个十分成体系的知识平台。 当我尝试部署一个自己的 Wiki 系统时，又开始纠结于选择哪个 Wiki 系统。参考网上博客，实际部署和对比比较了几个时下流行的 Wiki 系统：MediaWiki, DokuWiki, MDwiki, TiddlyWiki, wiz, vimwiki, Simiki, Wikitten 等等。都不如人意，有些是部署麻烦复杂，有些是界面太丑，有些不能分级，有些分级不能展开，有些不能搜索，还有的甚至不是用的 Markdown 。。。 根据这些不算满意的使用体验，我总结整理了一下自己对于 个人 Wiki 的一些需求。 界面简洁美观，排版字体友好 支持多级分类 方便修改和更新内容 部署简单 分类目录可展开和收缩 展开分类时可查看该分类下所有文章 / 词条的标题 每篇文章 / 词条能添加多个分类 / 标签 Wiki 可支持引用内部链接 使用 Markdown 书写文章 / 词条 支持全文搜索（可搜索内容和标题） 在之前的使用中，Wikiteen 是最接近我需求的，但是仍然有一些条件不满足，比如部署和搜索。但是我个人比较喜欢 Wikitten 的样式。 于是最终我选择了仿照 Wikitten 的样式自己写这个基于 Hexo 的 Wiki 主题 hexo-theme-Wikitten，作为自己用的一套 Wiki 系统，基本实现了上述的需求。现在暂时自己用着，当然这个初步功能还很简单，后续也有一堆 Bug 和 TODO List 需要维护，欢迎有兴趣的提提 PR。","tags":[],"categories":[]}]}